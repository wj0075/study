1、用LESS把HTML结构和布局样式搭建起来
2、使用CSS的语法实现下载区域的操作
3、使用ISCROLL实现MENU区域的局部滚动
4、MENU区域实现点击的时候让某一个选中而其余的不选中
5、开始加载页面的时候需要知道让谁默认选中(通过HASH值获取)->点击每一个A的时候需要让URL上面加一个HASH值

6、获取数据JSONP(需要知道赛事类型ID，所以我们需要在MENU模块中的点击和默认控制选中完成后把赛事类型ID传递给日历模块)
7、数据绑定
8、默认让当前日期选中(并且在七个中间的位置) ->如果当前日期不存在?如果没有比今天大的日期?...
9、实现左右切换

=====================================

1、移动端简历也要精心去打造(移动端简历不涉及到逻辑，重点在于页面的美观)

2、CRM或者AJAX分页或者自定义内容 (下周三下课后)

3、腾讯看比赛官方案例(PC+移动端)

4、PC端网站(HTML+CSS)

5、C模块也不要去死记硬背，把笔记总结全面了，每天抽一个时间把笔记过一遍，重点在于一定要自己找一些小的案例去实战
   主要是框架的应用：Angular、React、Vue... gulp、webpack、git...

=====================================

如果你感觉自己前几周的知识点没有学会，或者掌握的非常不扎实，我建议大家跟着下一期重听去；（重听的话需要重新缴纳800元考试费，一定要和我说）

=====================================
1、使用gitHub发布自己的网页
   GitHub:一个网站,一个基于GIT命令操作提供远程仓库存储的网站或者平台,也是全世界最权威的代码托管平台;我们知道的前端框架,原代码在GitHub上都有托管;
   =>自己以后可以慢慢去经营这个平台,建立自己在圈子里面的人脉和价值(影响力)

   基础的gitHub操作
     1)修改自己的信息和用户名
       登录(sign in)->展开右上角头像区域(Settings)->Profile基本信息/Account账号信息(Change username/Change password)/Emails增加自己常用的邮箱
     2)回去后首先把前端开发常用的框架(最好是自己即将去学的)都FORK(克隆)到自己的仓库一份,这样以后别人进入自己主页,可以看到一些自己正在研究的框架技术

     3)把一些乱七八糟的仓库删除掉

     4)回去后互粉一下


   发布页面
     gitHub免费为我们提供服务器,我们只要在gitHub上有一个自己的账号,就可以把自己的页面传到gitHub上去,基于gitHub把页面发布,别人通过外网网址就可以看到我们的页面了;但是gitHub限制我们只能上传和发布前端静态页面(不能有后台程序),但是页面中的数据可以跨域访问实现动态绑定;
     1)创建一个仓库
       README.MD文件是使用MarkDown语法编写对于当前项目的详细描述的
       仓库默认的分支是master主分支,当前我们所有的项目文件都要放在master分支下(真实项目中master是主分支,如果项目是团队合作开发的,每个人还有一个自己的分支,每个人每天上班第一件事情把主分支中的内容复制到自己的分支下,然后当天开发内容都是操作的自己分支,下班后,把自己的分支内容提交到主分支上,由技术主管负责把每个人的分支内容进行合并)

     2)基于当前的这个仓库发布我们的项目
       一个账号可以创建N个仓库,每一个仓库都可以发布一个项目,我们可以发布N个项目
       Settings -> Options(GitHub Pages) -> Choose a theme(选择一个模板或者专题) -> 我们这里发布移动端简历,需要的样式结构和模板不一样,所以直接的用默认即可 Select theme -> Your site is ready to be published at https://zhouxiaotian.github.io/resume/. (这个地址就是以后让别人访问我们项目的地址)
       https://用户名.github.io/仓库名/index.html (如果访问页面是项目根目录下的index.html的话,我们访问的时候可以省略文件名不写,这样默认找的也是index.html,如果不是index则必须要写上才可以)

     3)把当前的项目克隆到本地一份
       $ git clone https://github.com/zhouxiaotian/resume.git
       这样不仅把远程仓库中的文件克隆到本地一份,而且本地的这一份和远程仓库之间还保持了连接(本地文件中有一个隐藏的文件.git，这个是git的基本配置，这个文件非常的重要不能删除)

     4)把自己的项目传到远程仓库上
       首先把自己需要上传的文件放到本地的文件夹中
       $ git add -A
       $ git commit -m'备注信息'  (有的同学会出现错误:Please tell me who you are!  提示:git config ..... 它的意思是需要你在本地把信息注册一下才可以,按照它的提示执行git config xxx 这两句话,用到的用户名和邮箱都是自己的gitHub中的信息，这两句话执行完成后在重新执行commit操作即可)
       $ git push origin master

     5)这样就完成了自己项目的发布,以后把地址给别人就可以让其人访问自己的项目了
       http://cli.im/ 生成二维码

     markdown语法,用来编写技术文档的(xxx.md)
=====================================
2、hybrid混合开发模式
   移动端/H5->场景宣传页、webApp(重点)

   webApp就是一个HTML5页面,我们做的页面最后都是运行在浏览器中的(在移动端我们还可以把做好的页面在微信或者QQ中查看)
   生活中我们经常去应用商店下载一个APP,然后使用,而很少打开浏览器输入网址访问

   [nativeApp]
      是由安卓或者IOS开发工程师使用object-c或者java-native技术实现的APP,这类东西是开发一款APP,上传到应用商店,然后用户在应用商店下载安装到手机上的
      弊端:
      1)开发出来的APP不能跨平台,需要两个团队来开发不同的产品,这样企业的办公成本特别的高
      2)升级更新需要用户手动来操作,这样导致最新的产品不能及时的传递给用户

      优势:
      1)nativeApp是直接的把程序安装到手机的操作系统中的，换句话说是直接运行在手机系统中的，这样的话就可以操作手机内部的功能，例如：读取用户通信录、短信、调取摄像头拍照、调取手机的重力感应...


   [webApp->HTML5]
      优势:
      1)可以跨平台开发,办公成本少
      2)项目文件都在自己的服务器上,我们只需要把服务器上的项目更新,用户下一次在进入到网站中看到的永远是最新的

      弊端:
      1)H5页面运行在手机的浏览器中的(浏览器是运行在手机系统中的),在H5中如果想调取使用手机内部的一些功能,需要所在的宿主环境(浏览器)提供相关的支持才可以,但是目前市场上的浏览器对于这方面的支持不是特别好,支持的功能实现出来的性能也比较的低


   hybrid混合开发模式就是把nativeApp和webApp相结合的一种模式，也是目前市场上最常用的模式
=====================================
3、移动端的TOUCH事件

  PC端的事件：
    click、dblclick
    mouseover、mouseout、mouseenter、mouseleave、mousedowm、mouseup、mousemove、mousewheel
    keydowm、keyup
    focus、blur、change、submit、checked、selected
    load、error、unload、resize、scroll
    transitionend、animationend
    readystatechange
    ...

  以上这些事件在移动端都存在吗?
    1)keydowm、keyup存在吗?
      很多手机都不支持这两个事件，因为移动端是虚拟键盘，keydowm和keyup在PC端经常用于验证在用户输入的过程中我们做什么事情，在移动端我们有一个事件‘input’，是专门用来代替这两个事件的
      oInput.addEventListener('input',function(){},false);
      oInput.oninput=function(){}

    2)mouse系列的事件在移动端支持的都不好，在移动端的事件应该都是以手指为核心

    3)click在PC端是点击(不区分是单击还是双击的)，在移动端也有click事件，移动端对于单击还是双击的需求还是很多的，所以移动端把click识别为单击(不是点击)，当用户点击屏幕后手指离开，click事件并没有立马被触发，而是等待了300MS，看这段时间内是否触发了第二次，如果触发了第二次就属于双击而不是单击(click)，没有触发第二次才是click单击 =>移动端click事件存在，但是属于单击事件，所以有300MS的延迟

      如何解决CLOCK事件的300MS延迟?
      =>我们只需要引入一个JS插件:fastclick.js

      移动端有自己专门的事件(手指事件、重力感应事件...)
        ->单手指事件(Touch)
            touchstart、touchmove、touchend、touchcancle(意外情况导致手指操作终止会触发这个事件)

        ->多手指事件(Gesture)
            gesturestart、gesturechange、gestureend、gesturecancle















=====================================
4、HTML5的本地存储

=====================================
5、移动端webApp页面的实战开发(腾讯)