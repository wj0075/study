1.关于call：作用-》是用来改变this指向，他有两种参数；
第一种（也就是第一个参数）：用来改变this指向
第二种（给call前面的函数传参）：从第二个参数开始，给call前面的函数从左往右一个个的传参，参数以逗号形式分隔；
2.关于继承：
1）call继承：核心-》把父类私有的属性和方法，继承给自己私有的；
    --call 跟公有属性无关（理解即可）
2）原型链继承：核心-》把父类私有和公有的属性，都给了子类共有的；
    --原型链继承：跟子类私有属性无关；（理解即可）
3）冒充继承：核心-》把父类私有+公有的属性，都给了子类私有的；
    --子类公有跟父类公有无关（理解即可）
4）混合继承1：call继承+原型链继承；--也常用，需要注意constructor指向；
    call继承：把父类私有 给了 子类私有
    原型链继承：把父类私有+公有 给了 子类公有；
    问题：子类私有中有父类私有的，子类公有中也有父类私有的；
5)混合继承2：call继承+拷贝继承（extend）--最常用
6)混合继承3：call继承+Object.create()思想；
3.propertyIsEnumerable:是否可以枚举的属性；
4.prototype是谁的属性，它起什么作用？__proto__是谁的属性，它有什么作用？prototype和__proto__有什么联系？
prototype是函数数据类型的属性；作用：存放公有的属性和方法；
__proto__是对象数据类型的属性；作用：原型链； 属性值：当前实例所属类的原型；
prototype和__proto__有什么联系？当前实例可以通过__proto__找到prototye这个原型；
5.闭包：当函数被调用的时候，会形成一个私有作用域域，保护里面的变量不受外界的干扰，函数的这种保护机制，叫做闭包；
作用：
    1.防止全局变量名的冲突
    2.封装
6.总结this指向：
1）当前元素被触发的时候，会调用一个函数，函数中的this指向当前这个元素；
2）函数被调用的时候，点前面是谁，this就是谁
3）自执行函数中的this，window；
4）构造函数中的this是实例；
5）回调函数中的this默认是window；
6）call可以改变this指向；
7.* 回调函数：把一个函数体，作为参数，传给另一个函数；
      *1）被传进来的函数 callback，调用的次数，取决于我们自己的条件；
      *2）callback() 被调用的时候，可以进行传参；
      *3）callback() 被调用的时候，可以改变this指向；
      *4）callback()可以有返回值，返回值有几个取决于条件；
8.解剖forEach()和map();
* forEach():作用-》遍历数组中的每一项；
    * forEach()有两个参数：参1：回调函数； 参2：用来改变this指向的；
    * forEach()中的回调函数，有三个参数：
    *   item->数组中的每一项内容
    *   index->索引；
    *   input：原始数组；
    *forEach()中回调函数的执行次数，取决于数组的长度；
    *forEach():没有返回值；
map的使用方式，跟forEach一样，但是，map有返回值；返回值是一个数组；数组中记录了每个回调函数的返回值；








